1. function outer() {
      const outerVar = "I'm from outer!";
    
     function inner() {
        console.log(outerVar);
      }
  
      return inner;
    }

    const closureFunc = outer();
    closureFunc();  // What will be logged to the console?

Ans.  I'm from outer!

2.  console.log(a);  // What will be logged to the console?
    var a = 5;

    undefined

3.  const x = 10;

    function foo() {
        console.log(x);
    }

    function bar() {
        const x = 20;
        foo();
    }

    bar();  // What will be logged to the console?

    10

4.    const numbers = [1, 2, 3, 4, 5];
      const squared = numbers.map(x => x * x);
      console.log(squared);  // What will be logged to the console?    

      [1,4,9,16,25]

5.    const person = {
        firstName: "John",
        lastName: "Doe",
        age: 30
      };
      const { firstName, age } = person;
      console.log(firstName, age);  // What will be logged to the console?

      John 30

6.    const name = "Alice";
      const greeting = `Hello, ${name}!`;
      console.log(greeting);  // What will be logged to the console?

      Hello, Alice

7.    function doSomethingAsync(callback) {
        setTimeout(() => {
          console.log("Async operation completed.");
          callback();
        }, 2000);
      }

      console.log("Start");
      doSomethingAsync(() => {
        console.log("Callback executed.");
      });
      console.log("End");

      Start
      End
      Async operation completed
      Callback executed

8.    function fetchData() {
        return new Promise((resolve, reject) => {
          setTimeout(() => {
            const data = "Fetched data";
            // resolve(data); // Uncomment this line to resolve the promise
            reject("Error: Unable to fetch data");
          }, 1000);
        });
      }
      
      fetchData()
        .then(response => console.log(response))
        .catch(error => console.error(error));

      Error: Unable to fetch data

      Fetched data //when code uncommented

9.    class Animal {
        constructor(name) {
          this.name = name;
        }
      
        makeSound() {
          console.log("Generic animal sound");
        }
      }

      class Dog extends Animal {
        constructor(name) {
          super(name);
        }
      
        makeSound() {
          console.log("Woof!");
        }
      }

    const dog = new Dog("Buddy");
    dog.makeSound();  // What will be logged to the console?

    Woof!

10.   const myMap = new Map();
      myMap.set("key1", "value1");
      myMap.set("key2", "value2");

      console.log(myMap.get("key1"));  // What will be logged to the console?

      const mySet = new Set([1, 2, 3, 4, 4, 5]);
      console.log(mySet.size);  // What will be logged to the console?

      value1
      5